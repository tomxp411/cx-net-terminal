
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -o ANSI.PRG --list ANSI.LST --cbm-prg ANSI.ASM
; Tue Apr 02 23:27:32 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ANSI.ASM


;******  Processing file: KERNAL.ASM

=$ffe4					getin = $ffe4
=$ff62					screen_set_charset = $ff62
=$ff47					enter_basic = $ff47

;******  Return to file: ANSI.ASM

>0801	0b 08 0a 00 ce 90 3a 9e		.byte $0B,$08,$0A,$00,$CE,$90,$3A,$9E,$24,$38,$31,$30,$00,$00,$00
>0809	24 38 31 30 00 00 00
.0810					main:
.0810	20 0e 0c	jsr $0c0e	    jsr ansi_init
.0813					test_start:
.0813	ae 3c 08	ldx $083c	    ldx start_pos
.0816	ac 3d 08	ldy $083d	    ldy start_pos+1
.0819	20 19 0c	jsr $0c19	    jsr locate
.081c	a9 3e		lda #$3e	    lda #<str_test
.081e	85 02		sta $02		    sta R0
.0820	a9 08		lda #$08	    lda #>str_test
.0822	85 03		sta $03		    sta R0+1
.0824					print_loop:
.0824	20 53 0c	jsr $0c53	    jsr ansi_print_str
.0827	20 e4 ff	jsr $ffe4	-   jsr getin
.082a	f0 fb		beq $0827	    beq -
.082c	b2 02		lda ($02)	    lda (R0)
.082e	d0 f4		bne $0824	    bne print_loop
.0830					done:
.0830	20 4c 0d	jsr $0d4c	    jsr ansi_cls
.0833	4c 13 08	jmp $0813	    jmp test_start
.0836	00		brk #		    brk
.0837					ansi_callback:
.0837	60		rts		    RTS
>0838	00 00 00 00			.byte 0,0,0,0
.083c					start_pos:
>083c	05 0a				    .byte 5,10
.083e					str_test:
>083e	7c 41 42 43 44 45 46 47		    .text "|ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQ|",0
>0846	48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57
>0856	58 59 5a 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d
>0866	6e 6f 70 71 72 73 74 75 76 77 78 79 7a 30 31 32
>0876	33 34 35 36 37 38 39 41 42 43 44 45 46 47 48 49
>0886	4a 4b 4c 4d 4e 4f 50 51 7c 00
.0890					str_test_home:
>0890	1b 5b 48			    .text 27,"[H"
>0893	31 0d 0a			    .text "1",$0D,$0A
>0896	32 0d 0a			    .text "2",$0D,$0A
>0899	33 0d 0a			    .text "3",$0D,$0A
>089c	34 0d 0a			    .text "4",$0D,$0A
>089f	35 0d 0a			    .text "5",$0D,$0A
>08a2	36 0d 0a			    .text "6",$0D,$0A
>08a5	37 0d 0a			    .text "7",$0D,$0A
>08a8	38 0d 0a			    .text "8",$0D,$0A
>08ab	39 0d 0a			    .text "9",$0D,$0A
>08ae	31 30 0d 0a			    .text "10",$0D,$0A
>08b2	1b 5b 48 c5 20 48 4f 4d		    .text 27,"[H",$c5," HOME POSITION",$0D,$0A
>08ba	45 20 50 4f 53 49 54 49 4f 4e 0d 0a
>08c6	1b 5b 33 30 3b 34 30 48		    .text 27,"[30;40H",$c5," Row 30 Col 40",$0d,$0a
>08ce	c5 20 52 6f 77 20 33 30 20 43 6f 6c 20 34 30 0d
>08de	0a
>08df	1b 5b 36 30 3b 36 35 48		    .text 27,"[60;65H",$c5," Row 60 Col 65",$0d,$0a
>08e7	c5 20 52 6f 77 20 36 30 20 43 6f 6c 20 36 35 0d
>08f7	0a
>08f8	1b 5b 34 3b 32 48 c5 20		    .text 27,"[4;2H",$c5," Row 4 Col 2",$0d,$0a
>0900	52 6f 77 20 34 20 43 6f 6c 20 32 0d 0a
>090d	00				    .byte 0
>090e	1b 5b 32 4a			    .text 27,"[2J"
>0912	1b 5b 31 30 48 42 61 64		    .text 27,"[10HBad escape code tests:",13,10
>091a	20 65 73 63 61 70 65 20 63 6f 64 65 20 74 65 73
>092a	74 73 3a 0d 0a
>092f	1b 48 20 6d 69 73 73 69		    .text 27,"H missing [ in escape code",$0d,$0a
>0937	6e 67 20 5b 20 69 6e 20 65 73 63 61 70 65 20 63
>0947	6f 64 65 0d 0a
>094c	1b 5b 5a 20 69 6e 76 61		    .text 27,"[Z invalid command in escape code",$0d,$0a
>0954	6c 69 64 20 63 6f 6d 6d 61 6e 64 20 69 6e 20 65
>0964	73 63 61 70 65 20 63 6f 64 65 0d 0a
>0970	00				    .byte 0
>0971	1b 5b 32 4a			    .text 27,"[2J"
>0975	1b 5b 48			    .text 27,"[H"
>0978	31 0d 0a			    .text "1",$0D,$0A
>097b	32 0d 0a			    .text "2",$0D,$0A
>097e	33 0d 0a			    .text "3",$0D,$0A
>0981	34 0d 0a			    .text "4",$0D,$0A
>0984	35 0d 0a			    .text "5",$0D,$0A
>0987	36 0d 0a			    .text "6",$0D,$0A
>098a	37 0d 0a			    .text "7",$0D,$0A
>098d	38 0d 0a			    .text "8",$0D,$0A
>0990	39 0d 0a			    .text "9",$0D,$0A
>0993	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>099b	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>09ab	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>09bb	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>09cb	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>09db	2e 2e 2e 2e 2e 2e 2e 38
>09e3	31 31 0d 0a			    .text "11",$0D,$0A
>09e7	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>09ef	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>09ff	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0a0f	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0a1f	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0a2f	2e 2e 2e 2e 2e 2e 2e 38
>0a37	31 33 0d 0a			    .text "13",$0D,$0A
>0a3b	31 34 0d 0a			    .text "14",$0D,$0A
>0a3f	31 35 0d 0a			    .text "15",$0D,$0A
>0a43	31 36 0d 0a			    .text "16",$0D,$0A
>0a47	31 37 0d 0a			    .text "17",$0D,$0A
>0a4b	31 38 0d 0a			    .text "18",$0D,$0A
>0a4f	31 39 0d 0a			    .text "19",$0D,$0A
>0a53	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>0a5b	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>0a6b	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0a7b	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0a8b	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0a9b	2e 2e 2e 2e 2e 2e 2e 38
>0aa3	1b 5b 31 31 3b 31 36 48		    .text 27,"[11;16HErasing cursor to end ->xxx"
>0aab	45 72 61 73 69 6e 67 20 63 75 72 73 6f 72 20 74
>0abb	6f 20 65 6e 64 20 2d 3e 78 78 78
>0ac6	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H[This text should disappear]",0
>0ace	5b 54 68 69 73 20 74 65 78 74 20 73 68 6f 75 6c
>0ade	64 20 64 69 73 61 70 70 65 61 72 5d 00
>0aeb	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H"
>0af3	1b 5b 30 4a			    .text 27,"[0J"
>0af7	00				    .byte 0
>0af8	1b 5b 48			    .text 27,"[H"
>0afb	31 0d 0a			    .text "1",$0D,$0A
>0afe	32 0d 0a			    .text "2",$0D,$0A
>0b01	33 0d 0a			    .text "3",$0D,$0A
>0b04	34 0d 0a			    .text "4",$0D,$0A
>0b07	35 0d 0a			    .text "5",$0D,$0A
>0b0a	36 0d 0a			    .text "6",$0D,$0A
>0b0d	37 0d 0a			    .text "7",$0D,$0A
>0b10	38 0d 0a			    .text "8",$0D,$0A
>0b13	39 0d 0a			    .text "9",$0D,$0A
>0b16	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>0b1e	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>0b2e	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0b3e	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0b4e	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0b5e	2e 2e 2e 2e 2e 2e 2e 38
>0b66	1b 5b 31 31 3b 34 30 48		    .text 27,      "[11;40H<- Erasing to cursor"
>0b6e	3c 2d 20 45 72 61 73 69 6e 67 20 74 6f 20 63 75
>0b7e	72 73 6f 72
>0b82	1b 5b 35 39 3b 35 33 48		    .text 27,"[59;53HThis should remain visible.",0
>0b8a	54 68 69 73 20 73 68 6f 75 6c 64 20 72 65 6d 61
>0b9a	69 6e 20 76 69 73 69 62 6c 65 2e 00
>0ba6	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H"
>0bae	1b 5b 31 4a			    .text 27,"[1J"
>0bb2	00				    .byte 0
>0bb3	1b 5b 33 30 3b 33 31 48		    .text 27,"[30;31HErase full screen",0
>0bbb	45 72 61 73 65 20 66 75 6c 6c 20 73 63 72 65 65
>0bcb	6e 00
>0bcd	1b 5b 32 4a			    .text 27,"[2J"
>0bd1	1b 5b 33 31 3b 33 33 48		    .text 27,"[31;33HScreen cleared",0
>0bd9	53 63 72 65 65 6e 20 63 6c 65 61 72 65 64 00
>0be8	1b 5b 32 3b 32 48 50 72		    .text 27,"[2;2HPress a key to restart test"
>0bf0	65 73 73 20 61 20 6b 65 79 20 74 6f 20 72 65 73
>0c00	74 61 72 74 20 74 65 73 74
>0c09	00				    .byte 0
>0c0a	00 00 00 00			    .byte 0,0,0,0

;******  Processing file: ANSI_DRIVER.ASM

=$b000					ScrnAdr = $B000  ; Address of screen buffer in VERA
=$9f20					vera_addr0 = $9f20    ; low byte of display address (col)
=$9f21					vera_addr1 = $9f21    ; middle byte of display address (row)
=$9f22					vera_addr2 = $9f22    ; high byte of display address (bank + increment)
=$9f23					vera_data0 = $9f23    ; VERA data port 0
=$9f24					vera_data1 = $9f24    ; VERA data port 1
=$9f25					vera_dcsel = $9f25    ; VERA data select register
=$02					R0      = $02
=$02					R0L     = $02
=$03					R0H     = $03
=$04					R1      = $04
=$04					R1L     = $04
=$05					R1H     = $05
=$04					R2      = $04
=$04					R2L     = $04
=$05					R2H     = $05
=$02					ansi_strptr   = R0  ; string pointer for prints procedure
.0c0e					ansi_init:
.0c0e	a9 0f		lda #$0f	    lda #15     ; ISO mode PETSCII character
.0c10	20 d2 ff	jsr $ffd2	    jsr $FFD2   ; print it
.0c13	a9 07		lda #$07	    lda #7
.0c15	20 62 ff	jsr $ff62	    jsr $ff62 ; screen_set_charset
.0c18	60		rts		    rts
.0c19					locate:
.0c19	8e ff 0d	stx $0dff	    stx csr_col
.0c1c	8c 00 0e	sty $0e00	    sty csr_row
.0c1f	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0c22	60		rts		    rts
.0c23					load_addr_vector:
.0c23	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0c26	ad ff 0d	lda $0dff	    lda csr_col
.0c29	0a		asl a		    asl A
.0c2a	8d 20 9f	sta $9f20	    sta vera_addr0
.0c2d	ad 00 0e	lda $0e00	    lda csr_row
.0c30	18		clc		    clc
.0c31	6d 02 0e	adc $0e02	    adc csr_base
.0c34	8d 21 9f	sta $9f21	    sta vera_addr1
.0c37	ad 01 0e	lda $0e01	    lda csr_bank
.0c3a	8d 22 9f	sta $9f22	    sta vera_addr2
.0c3d	60		rts		    rts
.0c3e					save_addr_vector:
.0c3e	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0c41	ad 20 9f	lda $9f20	    lda vera_addr0
.0c44	4a		lsr a		    lsr A
.0c45	8d ff 0d	sta $0dff	    sta csr_col
.0c48	ad 21 9f	lda $9f21	    lda vera_addr1
.0c4b	38		sec		    sec
.0c4c	ed 02 0e	sbc $0e02	    sbc csr_base
.0c4f	8d 00 0e	sta $0e00	    sta csr_row
.0c52	60		rts		    rts
.0c53					ansi_print_str:
.0c53	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0c56					prints_loop:
.0c56	b2 02		lda ($02)	    lda (ansi_strptr)
.0c58	f0 0b		beq $0c65	    beq prints_done
.0c5a	20 6c 0c	jsr $0c6c	    jsr chrout
.0c5d	e6 02		inc $02		        inc ansi_strptr
.0c5f	d0 02		bne $0c63	        bne +
.0c61	e6 03		inc $03		        inc ansi_strptr+1
.0c63					    +
.0c63	80 f1		bra $0c56	    bra prints_loop
.0c65					prints_done:
.0c65	e6 02		inc $02		        inc ansi_strptr
.0c67	d0 02		bne $0c6b	        bne +
.0c69	e6 03		inc $03		        inc ansi_strptr+1
.0c6b					    +
.0c6b	60		rts		    rts
.0c6c					chrout:
.0c6c	ac 07 0e	ldy $0e07	    ldy cmd_params
.0c6f	c0 04		cpy #$04	    cpy #cmd_max
.0c71	c0 01		cpy #$01	    cpy #1
.0c73	f0 30		beq $0ca5	    beq chrout_read_param
.0c75	b0 3e		bcs $0cb5	    bcs chrout_test_semi
.0c77	c9 20		cmp #$20	    cmp #' '
.0c79	90 03		bcc $0c7e	    bcc do_control_char
.0c7b	4c cd 0d	jmp $0dcd	    jmp just_print
.0c7e					do_control_char:
.0c7e	c9 1b		cmp #$1b	    cmp #$1B
.0c80	d0 06		bne $0c88	    bne +
.0c82	ee 07 0e	inc $0e07	    inc cmd_params
.0c85	4c fe 0d	jmp $0dfe	    jmp chrout_done
.0c88					+
.0c88	c9 0a		cmp #$0a	    cmp #$0A
.0c8a	d0 09		bne $0c95	    bne +
.0c8c	ee 00 0e	inc $0e00	    inc csr_row
.0c8f	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0c92	4c d9 0d	jmp $0dd9	    jmp check_bounds
.0c95					+
.0c95	c9 0d		cmp #$0d	    cmp #$0D ;CR
.0c97	d0 09		bne $0ca2	    bne +
.0c99	9c ff 0d	stz $0dff	    stz csr_col
.0c9c	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0c9f	4c d9 0d	jmp $0dd9	    jmp check_bounds
.0ca2	4c cd 0d	jmp $0dcd	+   jmp just_print
.0ca5					chrout_read_param:
.0ca5	c9 5b		cmp #$5b	    cmp #'['
.0ca7	d0 06		bne $0caf	    bne +
.0ca9	ee 07 0e	inc $0e07	    inc cmd_params
.0cac	4c fe 0d	jmp $0dfe	    jmp chrout_done
.0caf					+
.0caf	9c 07 0e	stz $0e07	    stz cmd_params
.0cb2	4c cd 0d	jmp $0dcd	    jmp just_print
.0cb5					chrout_test_semi:
.0cb5	c9 3b		cmp #$3b	    cmp #';'
.0cb7	d0 08		bne $0cc1	    bne chrout_test_number
.0cb9	a9 03		lda #$03	    lda #$03
.0cbb	8d 07 0e	sta $0e07	    sta cmd_params
.0cbe	4c fe 0d	jmp $0dfe	    jmp chrout_done
.0cc1					chrout_test_number:
.0cc1	c9 30		cmp #$30	    cmp #'0'
.0cc3	90 24		bcc $0ce9	    bcc chrout_not_number
.0cc5	c9 3a		cmp #$3a	    cmp #'9'+1
.0cc7	b0 20		bcs $0ce9	    bcs chrout_not_number
.0cc9	38		sec		    sec
.0cca	e9 30		sbc #$30	    sbc #'0'
.0ccc	8d 0b 0e	sta $0e0b	    sta digit_1
.0ccf	b9 07 0e	lda $0e07,y	    lda cmd_params,Y
.0cd2	0a		asl a		    asl
.0cd3	0a		asl a		    asl
.0cd4	0a		asl a		    asl
.0cd5	8d 10 0e	sta $0e10	    sta mult_1
.0cd8	b9 07 0e	lda $0e07,y	    lda cmd_params,Y
.0cdb	0a		asl a		    asl
.0cdc	18		clc		    clc
.0cdd	6d 10 0e	adc $0e10	    adc mult_1
.0ce0	6d 0b 0e	adc $0e0b	    adc digit_1
.0ce3	99 07 0e	sta $0e07,y	    sta cmd_params,Y
.0ce6	4c fe 0d	jmp $0dfe	    jmp chrout_done
.0ce9					chrout_not_number:
.0ce9	4c ec 0c	jmp $0cec	    jmp do_cmd
.0cec					do_cmd:
.0cec	c9 48		cmp #$48	    cmp #'H'
.0cee	f0 0b		beq $0cfb	    beq do_CUP
.0cf0	c9 66		cmp #$66	    cmp #'f'
.0cf2	f0 07		beq $0cfb	    beq do_CUP
.0cf4	c9 4a		cmp #$4a	    cmp #'J'
.0cf6	f0 15		beq $0d0d	    beq do_ED
.0cf8	4c be 0d	jmp $0dbe	    jmp cmd_done
.0cfb					do_CUP:
.0cfb	ae 0a 0e	ldx $0e0a	    ldx cmd_2
.0cfe	f0 01		beq $0d01	    beq +
.0d00	ca		dex		    dex
.0d01	ac 09 0e	ldy $0e09	+   ldy cmd_1
.0d04	f0 01		beq $0d07	    beq +
.0d06	88		dey		    dey
.0d07	20 19 0c	jsr $0c19	+   jsr locate
.0d0a	4c be 0d	jmp $0dbe	    jmp cmd_done
.0d0d					do_ED:
.0d0d	ad 09 0e	lda $0e09	    lda cmd_1
.0d10	d0 1c		bne $0d2e	    bne +
.0d12	ad ff 0d	lda $0dff	    lda csr_col
.0d15	8d 0c 0e	sta $0e0c	    sta work_col
.0d18	ad 00 0e	lda $0e00	    lda csr_row
.0d1b	8d 0d 0e	sta $0e0d	    sta work_row
.0d1e	ad 05 0e	lda $0e05	    lda col_count
.0d21	8d 0e 0e	sta $0e0e	    sta end_col
.0d24	ad 06 0e	lda $0e06	    lda row_count
.0d27	3a		dec a		    dec a
.0d28	8d 0f 0e	sta $0e0f	    sta end_row
.0d2b	4c 65 0d	jmp $0d65	    jmp do_erase
.0d2e	c9 01		cmp #$01	+   cmp #1
.0d30	d0 16		bne $0d48	    bne +
.0d32	9c 0c 0e	stz $0e0c	    stz work_col
.0d35	9c 0d 0e	stz $0e0d	    stz work_row
.0d38	ad ff 0d	lda $0dff	    lda csr_col
.0d3b	8d 0e 0e	sta $0e0e	    sta end_col
.0d3e	ad 00 0e	lda $0e00	    lda csr_row
.0d41	3a		dec a		    dec a
.0d42	8d 0f 0e	sta $0e0f	    sta end_row
.0d45	4c 65 0d	jmp $0d65	    jmp do_erase
.0d48	c9 02		cmp #$02	+   cmp #2
.0d4a	d0 16		bne $0d62	    bne +
.0d4c					ansi_cls:
.0d4c	9c 0c 0e	stz $0e0c	    stz work_col    ;4
.0d4f	9c 0d 0e	stz $0e0d	    stz work_row    ;4
.0d52	ad 05 0e	lda $0e05	    lda col_count   ;4
.0d55	8d 0e 0e	sta $0e0e	    sta end_col     ;4
.0d58	ad 06 0e	lda $0e06	    lda row_count   ;4
.0d5b	3a		dec a		    dec a           ;2
.0d5c	8d 0f 0e	sta $0e0f	    sta end_row     ;4
.0d5f	4c 65 0d	jmp $0d65	    jmp do_erase    ;3 29 once
.0d62	4c be 0d	jmp $0dbe	+   jmp cmd_done
.0d65					do_erase:
.0d65	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0d68	ad 0c 0e	lda $0e0c	    lda work_col    ;4
.0d6b	0a		asl a		    asl             ;2
.0d6c	8d 20 9f	sta $9f20	    sta vera_addr0  ;4
.0d6f	ad 0d 0e	lda $0e0d	    lda work_row    ;4
.0d72	18		clc		    clc             ;2
.0d73	6d 02 0e	adc $0e02	    adc csr_base    ;4
.0d76	8d 21 9f	sta $9f21	    sta vera_addr1  ;4
.0d79	ad 01 0e	lda $0e01	    lda csr_bank    ;4
.0d7c	8d 22 9f	sta $9f22	    sta vera_addr2  ;4
.0d7f	ae 04 0e	ldx $0e04	    ldx cur_char    ;4
.0d82	ac 03 0e	ldy $0e03	    ldy cur_color   ;4
.0d85	ad 05 0e	lda $0e05	    lda col_count   ;4
.0d88	38		sec		    sec             ;2
.0d89	ed 0c 0e	sbc $0e0c	    sbc work_col    ;4  52 per row
.0d8c					erase_fill_byte:
.0d8c	8e 23 9f	stx $9f23	    stx vera_data0      ;4
.0d8f	8c 23 9f	sty $9f23	    sty vera_data0      ;4
.0d92	3a		dec a		    dec a               ;2
.0d93	d0 f7		bne $0d8c	    bne erase_fill_byte ;3 13 per character
.0d95					erase_end_row:
.0d95	20 ba 0d	jsr $0dba	    jsr do_callback
.0d98					erase_next_row:
.0d98	9c 20 9f	stz $9f20	    stz vera_addr0
.0d9b	ee 21 9f	inc $9f21	    inc vera_addr1
.0d9e	ee 0d 0e	inc $0e0d	    inc work_row
.0da1	ad 0d 0e	lda $0e0d	    lda work_row
.0da4	3a		dec a		    dec a
.0da5	cd 0f 0e	cmp $0e0f	    cmp end_row
.0da8	f0 07		beq $0db1	    beq erase_last_row
.0daa	b0 0b		bcs $0db7	    bcs erase_done
.0dac	ad 05 0e	lda $0e05	    lda col_count
.0daf	80 db		bra $0d8c	    bra erase_fill_byte
.0db1					erase_last_row:
.0db1	ad 0e 0e	lda $0e0e	    lda end_col
.0db4	4c 8c 0d	jmp $0d8c	    jmp erase_fill_byte
.0db7					erase_done:
.0db7	4c be 0d	jmp $0dbe	    jmp cmd_done
.0dba					do_callback:
.0dba	6c 12 0e	jmp ($0e12)	    jmp (callback_addr)
.0dbd					empty_callback:
.0dbd	60		rts		    RTS
.0dbe					cmd_done:
.0dbe	9c 07 0e	stz $0e07	    stz cmd_params
.0dc1	9c 08 0e	stz $0e08	    stz cmd_0 ; ] for CSI, may be number for 2-byte commands
.0dc4	9c 09 0e	stz $0e09	    stz cmd_1 ; row for CUP, 0=to end, 1=to cursor, 2=all
.0dc7	9c 0a 0e	stz $0e0a	    stz cmd_2 ; col for CUP
.0dca	4c fe 0d	jmp $0dfe	    jmp chrout_done
.0dcd					just_print:
.0dcd	8d 23 9f	sta $9f23	    sta vera_data0
.0dd0	ad 03 0e	lda $0e03	    lda cur_color   ; get the current color
.0dd3	8d 23 9f	sta $9f23	    sta vera_data0
.0dd6	ee ff 0d	inc $0dff	    inc csr_col     ; moves cursor to the right one position
.0dd9					check_bounds:
.0dd9	ad ff 0d	lda $0dff	    lda csr_col
.0ddc	cd 05 0e	cmp $0e05	    cmp col_count
.0ddf	90 09		bcc $0dea	    bcc check_row
.0de1	9c ff 0d	stz $0dff	    stz csr_col
.0de4	ee 00 0e	inc $0e00	    inc csr_row
.0de7	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0dea					check_row:
.0dea	ad 00 0e	lda $0e00	    lda csr_row
.0ded	cd 06 0e	cmp $0e06	    cmp row_count
.0df0	90 0c		bcc $0dfe	    bcc check_done
.0df2	ad 00 0e	lda $0e00	    lda csr_row
.0df5	38		sec		    sec
.0df6	e9 01		sbc #$01	    sbc #$01
.0df8	8d 00 0e	sta $0e00	    sta csr_row
.0dfb	20 23 0c	jsr $0c23	    jsr load_addr_vector
.0dfe					check_done:
.0dfe					chrout_done:
.0dfe	60		rts		    rts
>0dff	00				csr_col:       .byte $00  ; KV column number (addr bits 0-7)
>0e00	00				csr_row:       .byte $00  ; KV row number (addr bits 8-15)
>0e01	11				csr_bank:       .byte $11 ; FIXED auto-increment and addr bit 16.
>0e02	b0				csr_base:      .byte $b0  ; FIXED base address of screen buffer
>0e03	01				cur_color:      .byte $01 ; KV currrent color attribute
>0e04	20				cur_char:       .byte ' ' ; FIXED fill character for clear screen
>0e05	50				col_count:    .byte 80 ; KV default screen width
>0e06	3c				row_count:    .byte 60 ; KV default screen height
=4					cmd_max = 4
>0e07	00				cmd_params  .byte 0     ; RAM >0 if parsing a terminal sequence
>0e08	00				cmd_0       .byte 0     ; RAM [ or param in non-CSI command
>0e09	00				cmd_1       .byte 0     ; RAM first parameter in CSI
>0e0a	00				cmd_2       .byte 0     ; RAM second parameter in CSI
>0e0b	00				digit_1     .byte 0     ; RAM character being processed
>0e0c	00				work_col      .byte 0  ; TEMP tracking values for screen clear, scroll
>0e0d	00				work_row      .byte 0  ; TEMP
>0e0e	00				end_col       .byte 0  ; TEMP
>0e0f	00				end_row       .byte 0  ; TEMP
>0e10	00				mult_1       .byte 0   ; TEMP temp slot for multiplication
>0e11	00				mult_2       .byte 0   ; TEMP temp slot for multiplication
.0e12					callback_addr:
>0e12	bd 0d				    .word empty_callback

;******  Return to file: ANSI.ASM


;******  End of listing
