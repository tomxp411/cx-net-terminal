
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -o ANSI.PRG --list ANSI.LST --cbm-prg ANSI.ASM
; Tue Apr 02 14:25:18 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ANSI.ASM


;******  Processing file: KERNAL.ASM

=$ffe4					getin = $ffe4
=$ff62					screen_set_charset = $ff62
=$ff47					enter_basic = $ff47

;******  Return to file: ANSI.ASM

>0801	0b 08 0a 00 ce 90 3a 9e		.byte $0B,$08,$0A,$00,$CE,$90,$3A,$9E,$24,$38,$31,$30,$00,$00,$00
>0809	24 38 31 30 00 00 00
.0810					main:
.0810	20 eb 0b	jsr $0beb	    jsr ansi_init
.0813					test_start:
.0813	ae 3b 08	ldx $083b	    ldx start_pos
.0816	ac 3c 08	ldy $083c	    ldy start_pos+1
.0819	20 f5 0b	jsr $0bf5	    jsr locate
.081c	a9 3d		lda #$3d	    lda #<str_test
.081e	85 02		sta $02		    sta R0
.0820	a9 08		lda #$08	    lda #>str_test
.0822	85 03		sta $03		    sta R0+1
.0824					print_loop:
.0824	20 2f 0c	jsr $0c2f	    jsr ansi_print_str
.0827	20 e4 ff	jsr $ffe4	-   jsr getin
.082a	f0 fb		beq $0827	    beq -
.082c	b2 02		lda ($02)	    lda (R0)
.082e	d0 f4		bne $0824	    bne print_loop
.0830					done:
.0830	20 28 0d	jsr $0d28	    jsr ansi_cls
.0833	4c 13 08	jmp $0813	    jmp test_start
.0836	00		brk #		    brk
>0837	00 00 00 00			.byte 0,0,0,0
.083b					start_pos:
>083b	05 0a				    .byte 5,10
.083d					str_test:
>083d	7c 41 42 43 44 45 46 47		    .text "|ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQ|",0
>0845	48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57
>0855	58 59 5a 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d
>0865	6e 6f 70 71 72 73 74 75 76 77 78 79 7a 30 31 32
>0875	33 34 35 36 37 38 39 41 42 43 44 45 46 47 48 49
>0885	4a 4b 4c 4d 4e 4f 50 51 7c 00
.088f					str_test_home:
>088f	1b 5b 48			    .text 27,"[H"
>0892	31 0d 0a			    .text "1",$0D,$0A
>0895	32 0d 0a			    .text "2",$0D,$0A
>0898	33 0d 0a			    .text "3",$0D,$0A
>089b	34 0d 0a			    .text "4",$0D,$0A
>089e	35 0d 0a			    .text "5",$0D,$0A
>08a1	36 0d 0a			    .text "6",$0D,$0A
>08a4	37 0d 0a			    .text "7",$0D,$0A
>08a7	38 0d 0a			    .text "8",$0D,$0A
>08aa	39 0d 0a			    .text "9",$0D,$0A
>08ad	31 30 0d 0a			    .text "10",$0D,$0A
>08b1	1b 5b 48 c5 20 48 4f 4d		    .text 27,"[H",$c5," HOME POSITION",$0D,$0A
>08b9	45 20 50 4f 53 49 54 49 4f 4e 0d 0a
>08c5	1b 5b 33 30 3b 34 30 48		    .text 27,"[30;40H",$c5," Row 30 Col 40",$0d,$0a
>08cd	c5 20 52 6f 77 20 33 30 20 43 6f 6c 20 34 30 0d
>08dd	0a
>08de	1b 5b 36 30 3b 36 35 48		    .text 27,"[60;65H",$c5," Row 60 Col 65",$0d,$0a
>08e6	c5 20 52 6f 77 20 36 30 20 43 6f 6c 20 36 35 0d
>08f6	0a
>08f7	1b 5b 34 3b 32 48 c5 20		    .text 27,"[4;2H",$c5," Row 4 Col 2",$0d,$0a
>08ff	52 6f 77 20 34 20 43 6f 6c 20 32 0d 0a
>090c	00				    .byte 0
>090d	1b 5b 32 4a			    .text 27,"[2J"
>0911	1b 5b 31 30 48 42 61 64		    .text 27,"[10HBad escape code tests:",13,10,0
>0919	20 65 73 63 61 70 65 20 63 6f 64 65 20 74 65 73
>0929	74 73 3a 0d 0a 00
>092f	1b 48 20 6d 69 73 73 69		    .text 27,"H missing [ in escape code",$0d,$0a,0
>0937	6e 67 20 5b 20 69 6e 20 65 73 63 61 70 65 20 63
>0947	6f 64 65 0d 0a 00
>094d	1b 5b 5a 20 69 6e 76 61		    .text 27,"[Z invalid command in escape code",$0d,$0a,0
>0955	6c 69 64 20 63 6f 6d 6d 61 6e 64 20 69 6e 20 65
>0965	73 63 61 70 65 20 63 6f 64 65 0d 0a 00
>0972	1b 5b 32 4a			    .text 27,"[2J"
>0976	1b 5b 48			    .text 27,"[H"
>0979	31 0d 0a			    .text "1",$0D,$0A
>097c	32 0d 0a			    .text "2",$0D,$0A
>097f	33 0d 0a			    .text "3",$0D,$0A
>0982	34 0d 0a			    .text "4",$0D,$0A
>0985	35 0d 0a			    .text "5",$0D,$0A
>0988	36 0d 0a			    .text "6",$0D,$0A
>098b	37 0d 0a			    .text "7",$0D,$0A
>098e	38 0d 0a			    .text "8",$0D,$0A
>0991	39 0d 0a			    .text "9",$0D,$0A
>0994	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>099c	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>09ac	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>09bc	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>09cc	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>09dc	2e 2e 2e 2e 2e 2e 2e 38
>09e4	31 31 0d 0a			    .text "11",$0D,$0A
>09e8	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>09f0	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>0a00	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0a10	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0a20	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0a30	2e 2e 2e 2e 2e 2e 2e 38
>0a38	31 33 0d 0a			s   .text "13",$0D,$0A
>0a3c	31 34 0d 0a			    .text "14",$0D,$0A
>0a40	31 35 0d 0a			    .text "15",$0D,$0A
>0a44	31 36 0d 0a			    .text "16",$0D,$0A
>0a48	31 37 0d 0a			    .text "17",$0D,$0A
>0a4c	31 38 0d 0a			    .text "18",$0D,$0A
>0a50	31 39 0d 0a			    .text "19",$0D,$0A
>0a54	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>0a5c	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>0a6c	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0a7c	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0a8c	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0a9c	2e 2e 2e 2e 2e 2e 2e 38
>0aa4	1b 5b 31 31 3b 31 36 48		    .text 27,"[11;16HErasing cursor to end ->xxx"
>0aac	45 72 61 73 69 6e 67 20 63 75 72 73 6f 72 20 74
>0abc	6f 20 65 6e 64 20 2d 3e 78 78 78
>0ac7	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H[This text should disappear]",0
>0acf	5b 54 68 69 73 20 74 65 78 74 20 73 68 6f 75 6c
>0adf	64 20 64 69 73 61 70 70 65 61 72 5d 00
>0aec	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H"
>0af4	1b 5b 30 4a			    .text 27,"[0J"
>0af8	00				    .text 0
>0af9	1b 5b 48			    .text 27,"[H"
>0afc	31 0d 0a			    .text "1",$0D,$0A
>0aff	32 0d 0a			    .text "2",$0D,$0A
>0b02	33 0d 0a			    .text "3",$0D,$0A
>0b05	34 0d 0a			    .text "4",$0D,$0A
>0b08	35 0d 0a			    .text "5",$0D,$0A
>0b0b	36 0d 0a			    .text "6",$0D,$0A
>0b0e	37 0d 0a			    .text "7",$0D,$0A
>0b11	38 0d 0a			    .text "8",$0D,$0A
>0b14	39 0d 0a			    .text "9",$0D,$0A
>0b17	2e 2e 2e 2e 2e 2e 2e 2e		    .text ".........1.........2.........3.........4.........5.........6.........7.........8"
>0b1f	2e 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 2e 2e 2e 2e
>0b2f	2e 2e 2e 2e 2e 33 2e 2e 2e 2e 2e 2e 2e 2e 2e 34
>0b3f	2e 2e 2e 2e 2e 2e 2e 2e 2e 35 2e 2e 2e 2e 2e 2e
>0b4f	2e 2e 2e 36 2e 2e 2e 2e 2e 2e 2e 2e 2e 37 2e 2e
>0b5f	2e 2e 2e 2e 2e 2e 2e 38
>0b67	1b 5b 31 31 3b 34 30 48		    .text 27,      "[11;40H<- Erasing to cursor",0
>0b6f	3c 2d 20 45 72 61 73 69 6e 67 20 74 6f 20 63 75
>0b7f	72 73 6f 72 00
>0b84	1b 5b 31 31 3b 34 30 48		    .text 27,"[11;40H"
>0b8c	1b 5b 31 4a			    .text 27,"[1J"
>0b90	00				    .text 0
>0b91	1b 5b 33 30 3b 33 31 48		    .text 27,"[30;31HErase full screen",0
>0b99	45 72 61 73 65 20 66 75 6c 6c 20 73 63 72 65 65
>0ba9	6e 00
>0bab	1b 5b 32 4a			    .text 27,"[2J"
>0baf	1b 5b 33 31 3b 33 33 48		    .text 27,"[31;33HScreen cleared",0
>0bb7	53 63 72 65 65 6e 20 63 6c 65 61 72 65 64 00
>0bc6	1b 5b 32 3b 32 48 50 72		    .text 27,"[2;2HPress a key to restart test"
>0bce	65 73 73 20 61 20 6b 65 79 20 74 6f 20 72 65 73
>0bde	74 61 72 74 20 74 65 73 74
>0be7	00 00 00 00			    .byte 0,0,0,0

;******  Processing file: TERM_ANSI.ASM

=$b000					ScrnAdr = $B000  ; Address of screen buffer in VERA
=$9f20					vera_addr0 = $9f20    ; low byte of display address (col)
=$9f21					vera_addr1 = $9f21    ; middle byte of display address (row)
=$9f22					vera_addr2 = $9f22    ; high byte of display address (bank + increment)
=$9f23					vera_data0 = $9f23    ; VERA data port 0
=$9f24					vera_data1 = $9f24    ; VERA data port 1
=$9f25					vera_dcsel = $9f25    ; VERA data select register
=$02					R0      = $02
=$02					R0L     = $02
=$03					R0H     = $03
=$04					R1      = $04
=$04					R1L     = $04
=$05					R1H     = $05
=$04					R2      = $04
=$04					R2L     = $04
=$05					R2H     = $05
=$02					ansi_strptr   = R0  ; string pointer for prints procedure
.0beb					ansi_init:
.0beb	a9 0f		lda #$0f	    lda #15     ; ISO mode PETSCII character
.0bed	20 d2 ff	jsr $ffd2	    jsr $FFD2   ; print it
.0bf0	a9 07		lda #$07	    lda #7
.0bf2	20 62 ff	jsr $ff62	    jsr $ff62 ; screen_set_charset
.0bf5					locate:
.0bf5	8e d5 0d	stx $0dd5	    stx csr_col
.0bf8	8c d6 0d	sty $0dd6	    sty csr_row
.0bfb	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0bfe	60		rts		    rts
.0bff					load_addr_vector:
.0bff	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0c02	ad d5 0d	lda $0dd5	    lda csr_col
.0c05	0a		asl a		    asl A
.0c06	8d 20 9f	sta $9f20	    sta vera_addr0
.0c09	ad d6 0d	lda $0dd6	    lda csr_row
.0c0c	18		clc		    clc
.0c0d	6d d8 0d	adc $0dd8	    adc csr_base
.0c10	8d 21 9f	sta $9f21	    sta vera_addr1
.0c13	ad d7 0d	lda $0dd7	    lda csr_bank
.0c16	8d 22 9f	sta $9f22	    sta vera_addr2
.0c19	60		rts		    rts
.0c1a					save_addr_vector:
.0c1a	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0c1d	ad 20 9f	lda $9f20	    lda vera_addr0
.0c20	4a		lsr a		    lsr A
.0c21	8d d5 0d	sta $0dd5	    sta csr_col
.0c24	ad 21 9f	lda $9f21	    lda vera_addr1
.0c27	38		sec		    sec
.0c28	ed d8 0d	sbc $0dd8	    sbc csr_base
.0c2b	8d d6 0d	sta $0dd6	    sta csr_row
.0c2e	60		rts		    rts
.0c2f					ansi_print_str:
.0c2f	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0c32					prints_loop:
.0c32	b2 02		lda ($02)	    lda (ansi_strptr)
.0c34	f0 0b		beq $0c41	    beq prints_done
.0c36	20 48 0c	jsr $0c48	    jsr chrout
.0c39	e6 02		inc $02		        inc ansi_strptr
.0c3b	d0 02		bne $0c3f	        bne +
.0c3d	e6 03		inc $03		        inc ansi_strptr+1
.0c3f					    +
.0c3f	80 f1		bra $0c32	    bra prints_loop
.0c41					prints_done:
.0c41	e6 02		inc $02		        inc ansi_strptr
.0c43	d0 02		bne $0c47	        bne +
.0c45	e6 03		inc $03		        inc ansi_strptr+1
.0c47					    +
.0c47	60		rts		    rts
.0c48					chrout:
.0c48	ac dd 0d	ldy $0ddd	    ldy cmd_params
.0c4b	c0 04		cpy #$04	    cpy #cmd_max
.0c4d	c0 01		cpy #$01	    cpy #1
.0c4f	f0 30		beq $0c81	    beq chrout_read_param
.0c51	b0 3e		bcs $0c91	    bcs chrout_test_semi
.0c53	c9 20		cmp #$20	    cmp #' '
.0c55	90 03		bcc $0c5a	    bcc do_control_char
.0c57	4c a3 0d	jmp $0da3	    jmp just_print
.0c5a					do_control_char:
.0c5a	c9 1b		cmp #$1b	    cmp #$1B
.0c5c	d0 06		bne $0c64	    bne +
.0c5e	ee dd 0d	inc $0ddd	    inc cmd_params
.0c61	4c d4 0d	jmp $0dd4	    jmp chrout_done
.0c64					+
.0c64	c9 0a		cmp #$0a	    cmp #$0A
.0c66	d0 09		bne $0c71	    bne +
.0c68	ee d6 0d	inc $0dd6	    inc csr_row
.0c6b	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0c6e	4c af 0d	jmp $0daf	    jmp check_bounds
.0c71					+
.0c71	c9 0d		cmp #$0d	    cmp #$0D ;CR
.0c73	d0 09		bne $0c7e	    bne +
.0c75	9c d5 0d	stz $0dd5	    stz csr_col
.0c78	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0c7b	4c af 0d	jmp $0daf	    jmp check_bounds
.0c7e	4c a3 0d	jmp $0da3	+   jmp just_print
.0c81					chrout_read_param:
.0c81	c9 5b		cmp #$5b	    cmp #'['
.0c83	d0 06		bne $0c8b	    bne +
.0c85	ee dd 0d	inc $0ddd	    inc cmd_params
.0c88	4c d4 0d	jmp $0dd4	    jmp chrout_done
.0c8b					+
.0c8b	9c dd 0d	stz $0ddd	    stz cmd_params
.0c8e	4c a3 0d	jmp $0da3	    jmp just_print
.0c91					chrout_test_semi:
.0c91	c9 3b		cmp #$3b	    cmp #';'
.0c93	d0 08		bne $0c9d	    bne chrout_test_number
.0c95	a9 03		lda #$03	    lda #$03
.0c97	8d dd 0d	sta $0ddd	    sta cmd_params
.0c9a	4c d4 0d	jmp $0dd4	    jmp chrout_done
.0c9d					chrout_test_number:
.0c9d	c9 30		cmp #$30	    cmp #'0'
.0c9f	90 24		bcc $0cc5	    bcc chrout_not_number
.0ca1	c9 3a		cmp #$3a	    cmp #'9'+1
.0ca3	b0 20		bcs $0cc5	    bcs chrout_not_number
.0ca5	38		sec		    sec
.0ca6	e9 30		sbc #$30	    sbc #'0'
.0ca8	8d e1 0d	sta $0de1	    sta digit_1
.0cab	b9 dd 0d	lda $0ddd,y	    lda cmd_params,Y
.0cae	0a		asl a		    asl
.0caf	0a		asl a		    asl
.0cb0	0a		asl a		    asl
.0cb1	8d e6 0d	sta $0de6	    sta mult_1
.0cb4	b9 dd 0d	lda $0ddd,y	    lda cmd_params,Y
.0cb7	0a		asl a		    asl
.0cb8	18		clc		    clc
.0cb9	6d e6 0d	adc $0de6	    adc mult_1
.0cbc	6d e1 0d	adc $0de1	    adc digit_1
.0cbf	99 dd 0d	sta $0ddd,y	    sta cmd_params,Y
.0cc2	4c d4 0d	jmp $0dd4	    jmp chrout_done
.0cc5					chrout_not_number:
.0cc5	4c c8 0c	jmp $0cc8	    jmp do_cmd
.0cc8					do_cmd:
.0cc8	c9 48		cmp #$48	    cmp #'H'
.0cca	f0 0b		beq $0cd7	    beq do_CUP
.0ccc	c9 66		cmp #$66	    cmp #'f'
.0cce	f0 07		beq $0cd7	    beq do_CUP
.0cd0	c9 4a		cmp #$4a	    cmp #'J'
.0cd2	f0 15		beq $0ce9	    beq do_ED
.0cd4	4c 94 0d	jmp $0d94	    jmp cmd_done
.0cd7					do_CUP:
.0cd7	ae e0 0d	ldx $0de0	    ldx cmd_2
.0cda	f0 01		beq $0cdd	    beq +
.0cdc	ca		dex		    dex
.0cdd	ac df 0d	ldy $0ddf	+   ldy cmd_1
.0ce0	f0 01		beq $0ce3	    beq +
.0ce2	88		dey		    dey
.0ce3	20 f5 0b	jsr $0bf5	+   jsr locate
.0ce6	4c 94 0d	jmp $0d94	    jmp cmd_done
.0ce9					do_ED:
.0ce9	ad df 0d	lda $0ddf	    lda cmd_1
.0cec	d0 1c		bne $0d0a	    bne +
.0cee	ad d5 0d	lda $0dd5	    lda csr_col
.0cf1	8d e2 0d	sta $0de2	    sta work_col
.0cf4	ad d6 0d	lda $0dd6	    lda csr_row
.0cf7	8d e3 0d	sta $0de3	    sta work_row
.0cfa	ad db 0d	lda $0ddb	    lda col_count
.0cfd	8d e4 0d	sta $0de4	    sta end_col
.0d00	ad dc 0d	lda $0ddc	    lda row_count
.0d03	3a		dec a		    dec a
.0d04	8d e5 0d	sta $0de5	    sta end_row
.0d07	4c 41 0d	jmp $0d41	    jmp do_erase
.0d0a	c9 01		cmp #$01	+   cmp #1
.0d0c	d0 16		bne $0d24	    bne +
.0d0e	9c e2 0d	stz $0de2	    stz work_col
.0d11	9c e3 0d	stz $0de3	    stz work_row
.0d14	ad d5 0d	lda $0dd5	    lda csr_col
.0d17	8d e4 0d	sta $0de4	    sta end_col
.0d1a	ad d6 0d	lda $0dd6	    lda csr_row
.0d1d	3a		dec a		    dec a
.0d1e	8d e5 0d	sta $0de5	    sta end_row
.0d21	4c 41 0d	jmp $0d41	    jmp do_erase
.0d24	c9 02		cmp #$02	+   cmp #2
.0d26	d0 16		bne $0d3e	    bne +
.0d28					ansi_cls:
.0d28	9c e2 0d	stz $0de2	    stz work_col
.0d2b	9c e3 0d	stz $0de3	    stz work_row
.0d2e	ad db 0d	lda $0ddb	    lda col_count
.0d31	8d e4 0d	sta $0de4	    sta end_col
.0d34	ad dc 0d	lda $0ddc	    lda row_count
.0d37	3a		dec a		    dec a
.0d38	8d e5 0d	sta $0de5	    sta end_row
.0d3b	4c 41 0d	jmp $0d41	    jmp do_erase
.0d3e	4c 94 0d	jmp $0d94	+   jmp cmd_done
.0d41					do_erase:
.0d41	9c 25 9f	stz $9f25	    stz vera_dcsel        ; work with data port 0
.0d44	ad e2 0d	lda $0de2	    lda work_col
.0d47	0a		asl a		    asl
.0d48	8d 20 9f	sta $9f20	    sta vera_addr0
.0d4b	ad e3 0d	lda $0de3	    lda work_row
.0d4e	18		clc		    clc
.0d4f	6d d8 0d	adc $0dd8	    adc csr_base
.0d52	8d 21 9f	sta $9f21	    sta vera_addr1
.0d55	ad d7 0d	lda $0dd7	    lda csr_bank
.0d58	8d 22 9f	sta $9f22	    sta vera_addr2
.0d5b	ae da 0d	ldx $0dda	    ldx cur_char
.0d5e	ac d9 0d	ldy $0dd9	    ldy cur_color
.0d61	ad db 0d	lda $0ddb	    lda col_count
.0d64	38		sec		    sec
.0d65	ed e2 0d	sbc $0de2	    sbc work_col
.0d68					erase_fill_byte
.0d68	8e 23 9f	stx $9f23	    stx vera_data0
.0d6b	8c 23 9f	sty $9f23	    sty vera_data0
.0d6e	3a		dec a		    dec a
.0d6f	d0 f7		bne $0d68	    bne erase_fill_byte
.0d71					erase_next_row:
.0d71	9c 20 9f	stz $9f20	    stz vera_addr0
.0d74	ee 21 9f	inc $9f21	    inc vera_addr1
.0d77	ee e3 0d	inc $0de3	    inc work_row
.0d7a	ad e3 0d	lda $0de3	    lda work_row
.0d7d	3a		dec a		    dec a
.0d7e	cd e5 0d	cmp $0de5	    cmp end_row
.0d81	f0 08		beq $0d8b	    beq erase_last_row
.0d83	b0 0c		bcs $0d91	    bcs erase_done
.0d85	ad db 0d	lda $0ddb	    lda col_count
.0d88	4c 68 0d	jmp $0d68	    jmp erase_fill_byte
.0d8b					erase_last_row:
.0d8b	ad e4 0d	lda $0de4	    lda end_col
.0d8e	4c 68 0d	jmp $0d68	    jmp erase_fill_byte
.0d91					erase_done:
.0d91	4c 94 0d	jmp $0d94	    jmp cmd_done
.0d94					cmd_done:
.0d94	9c dd 0d	stz $0ddd	    stz cmd_params
.0d97	9c de 0d	stz $0dde	    stz cmd_0 ; ] for CSI, may be number for 2-byte commands
.0d9a	9c df 0d	stz $0ddf	    stz cmd_1 ; row for CUP, 0=to end, 1=to cursor, 2=all
.0d9d	9c e0 0d	stz $0de0	    stz cmd_2 ; col for CUP
.0da0	4c d4 0d	jmp $0dd4	    jmp chrout_done
.0da3					just_print:
.0da3	8d 23 9f	sta $9f23	    sta vera_data0
.0da6	ad d9 0d	lda $0dd9	    lda cur_color   ; get the current color
.0da9	8d 23 9f	sta $9f23	    sta vera_data0
.0dac	ee d5 0d	inc $0dd5	    inc csr_col     ; moves cursor to the right one position
.0daf					check_bounds:
.0daf	ad d5 0d	lda $0dd5	    lda csr_col
.0db2	cd db 0d	cmp $0ddb	    cmp col_count
.0db5	90 09		bcc $0dc0	    bcc check_row
.0db7	9c d5 0d	stz $0dd5	    stz csr_col
.0dba	ee d6 0d	inc $0dd6	    inc csr_row
.0dbd	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0dc0					check_row:
.0dc0	ad d6 0d	lda $0dd6	    lda csr_row
.0dc3	cd dc 0d	cmp $0ddc	    cmp row_count
.0dc6	90 0c		bcc $0dd4	    bcc check_done
.0dc8	ad d6 0d	lda $0dd6	    lda csr_row
.0dcb	38		sec		    sec
.0dcc	e9 01		sbc #$01	    sbc #$01
.0dce	8d d6 0d	sta $0dd6	    sta csr_row
.0dd1	20 ff 0b	jsr $0bff	    jsr load_addr_vector
.0dd4					check_done:
.0dd4					chrout_done:
.0dd4	60		rts		    rts
>0dd5	00				csr_col:       .byte $00 ; column number (addr bits 0-7)
>0dd6	00				csr_row:       .byte $00 ; row number (addr bits 8-15)
>0dd7	11				csr_bank:       .byte $11 ; auto-increment and addr bit 16.
>0dd8	b0				csr_base:      .byte $b0 ; base address of screen buffer
>0dd9	01				cur_color:      .byte $01 ; currrent color attribute
>0dda	20				cur_char:       .byte ' ' ; fill character for clear screen
>0ddb	50				col_count:    .byte 80 ; default screen width
>0ddc	3c				row_count:    .byte 60 ; default screen height
=4					cmd_max = 4
>0ddd	00				cmd_params  .byte 0     ; >0 if parsing a terminal sequence
>0dde	00				cmd_0       .byte 0     ; [ or param in non-CSI command
>0ddf	00				cmd_1       .byte 0     ; first parameter in CSI
>0de0	00				cmd_2       .byte 0     ; second parameter in CSI
>0de1	00				digit_1     .byte 0     ; character being processed
>0de2	00				work_col      .byte 0  ; tracking values for screen clear, scroll
>0de3	00				work_row      .byte 0
>0de4	00				end_col        .byte 0
>0de5	00				end_row        .byte 0
>0de6	00				mult_1       .byte 0  ; temp slot for multiplication
>0de7	00				mult_2       .byte 0  ; temp slot for multiplication

;******  Return to file: ANSI.ASM


;******  End of listing
